/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: vmeta.proto */

#ifndef PROTOBUF_C_vmeta_2eproto__INCLUDED
#define PROTOBUF_C_vmeta_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Vmeta__Quaternion Vmeta__Quaternion;
typedef struct Vmeta__Location Vmeta__Location;
typedef struct Vmeta__Vector3 Vmeta__Vector3;
typedef struct Vmeta__NED Vmeta__NED;
typedef struct Vmeta__BoundingBox Vmeta__BoundingBox;
typedef struct Vmeta__DroneMetadata Vmeta__DroneMetadata;
typedef struct Vmeta__CameraMetadata Vmeta__CameraMetadata;
typedef struct Vmeta__TrackingProposalMetadata Vmeta__TrackingProposalMetadata;
typedef struct Vmeta__TrackingMetadata Vmeta__TrackingMetadata;
typedef struct Vmeta__WifiLinkMetadata Vmeta__WifiLinkMetadata;
typedef struct Vmeta__StarfishLinkInfo Vmeta__StarfishLinkInfo;
typedef struct Vmeta__StarfishLinkMetadata Vmeta__StarfishLinkMetadata;
typedef struct Vmeta__LinkMetadata Vmeta__LinkMetadata;
typedef struct Vmeta__TimedMetadata Vmeta__TimedMetadata;


/* --- enums --- */

typedef enum _Vmeta__TrackingClass {
  /*
   * Person 
   */
  VMETA__TRACKING_CLASS__TC_PERSON = 0,
  /*
   * Animal 
   */
  VMETA__TRACKING_CLASS__TC_ANIMAL = 1,
  /*
   * Bicycle 
   */
  VMETA__TRACKING_CLASS__TC_BICYCLE = 2,
  /*
   * Boat 
   */
  VMETA__TRACKING_CLASS__TC_BOAT = 3,
  /*
   * Car 
   */
  VMETA__TRACKING_CLASS__TC_CAR = 4,
  /*
   * Horse 
   */
  VMETA__TRACKING_CLASS__TC_HORSE = 5,
  /*
   * Motorbike 
   */
  VMETA__TRACKING_CLASS__TC_MOTORBIKE = 6,
  /*
   * Undefined (object not recognized).
   * Value is kept at the highest 1byte varint for clarity,
   * and to reserve space for future values 
   */
  VMETA__TRACKING_CLASS__TC_UNDEFINED = 127
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__TRACKING_CLASS)
} Vmeta__TrackingClass;
typedef enum _Vmeta__TrackingState {
  /*
   * Tracking 
   */
  VMETA__TRACKING_STATE__TS_TRACKING = 0,
  /*
   * Searching 
   */
  VMETA__TRACKING_STATE__TS_SEARCHING = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__TRACKING_STATE)
} Vmeta__TrackingState;
typedef enum _Vmeta__FlyingState {
  /*
   * Landed state 
   */
  VMETA__FLYING_STATE__FS_LANDED = 0,
  /*
   * Taking off state 
   */
  VMETA__FLYING_STATE__FS_TAKINGOFF = 1,
  /*
   * Hovering state 
   */
  VMETA__FLYING_STATE__FS_HOVERING = 2,
  /*
   * Flying state 
   */
  VMETA__FLYING_STATE__FS_FLYING = 3,
  /*
   * Landing state 
   */
  VMETA__FLYING_STATE__FS_LANDING = 4,
  /*
   * Emergency state 
   */
  VMETA__FLYING_STATE__FS_EMERGENCY = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__FLYING_STATE)
} Vmeta__FlyingState;
typedef enum _Vmeta__LinkType {
  /*
   * Unknown 
   */
  VMETA__LINK_TYPE__LINK_TYPE_UNKNOWN = 0,
  /*
   * Reserved 
   */
  VMETA__LINK_TYPE__LINK_TYPE_LO = 1,
  /*
   * Reserved 
   */
  VMETA__LINK_TYPE__LINK_TYPE_LAN = 2,
  /*
   * Wlan (Wi-Fi) interface 
   */
  VMETA__LINK_TYPE__LINK_TYPE_WLAN = 3,
  /*
   * Cellular (4G) interface 
   */
  VMETA__LINK_TYPE__LINK_TYPE_CELLULAR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__LINK_TYPE)
} Vmeta__LinkType;
typedef enum _Vmeta__LinkStatus {
  /*
   * Interface is down 
   */
  VMETA__LINK_STATUS__LINK_STATUS_DOWN = 0,
  /*
   * Interface is up with IP connectivity 
   */
  VMETA__LINK_STATUS__LINK_STATUS_UP = 1,
  /*
   * Starfish session established on the link 
   */
  VMETA__LINK_STATUS__LINK_STATUS_RUNNING = 2,
  /*
   * Link is ready to connect or accept connections 
   */
  VMETA__LINK_STATUS__LINK_STATUS_READY = 3,
  /*
   * Connection in progress 
   */
  VMETA__LINK_STATUS__LINK_STATUS_CONNECTING = 4,
  /*
   * Link error 
   */
  VMETA__LINK_STATUS__LINK_STATUS_ERROR = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__LINK_STATUS)
} Vmeta__LinkStatus;

/* --- messages --- */

/*
 * Unit quaternion 
 */
struct  Vmeta__Quaternion
{
  ProtobufCMessage base;
  float w;
  float x;
  float y;
  float z;
};
#define VMETA__QUATERNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__quaternion__descriptor) \
    , 0, 0, 0, 0 }


/*
 * Location on earth 
 */
struct  Vmeta__Location
{
  ProtobufCMessage base;
  /*
   * Latitude and longitude (degrees) 
   */
  double latitude;
  double longitude;
  /*
   * Altitude above the WGS 84 ellipsoid (m) 
   */
  double altitude;
  /*
   * Horizontal and vertical location accuracy (m), zero means unknown 
   */
  float horizontal_accuracy;
  float vertical_accuracy;
  /*
   * GPS Satellite vehicle count, only set if location comes at least
   * partially from a GPS sensor 
   */
  uint32_t sv_count;
};
#define VMETA__LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__location__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/*
 * Generic 3 component vector 
 */
struct  Vmeta__Vector3
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
};
#define VMETA__VECTOR3__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__vector3__descriptor) \
    , 0, 0, 0 }


/*
 * 3 component vector, in NED frame 
 */
struct  Vmeta__NED
{
  ProtobufCMessage base;
  float north;
  float east;
  float down;
};
#define VMETA__NED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__ned__descriptor) \
    , 0, 0, 0 }


/*
 * Bounding box for tracking and proposal 
 */
struct  Vmeta__BoundingBox
{
  ProtobufCMessage base;
  /*
   * Position [0; 1] in picture 
   */
  float x;
  float y;
  /*
   * Dimensions [0; 1] relative to picture 
   */
  float width;
  float height;
  /*
   * Type of tracked object 
   */
  Vmeta__TrackingClass object_class;
  /*
   * Tracking confidence [0; 1] 
   */
  float confidence;
  /*
   * Box unique identifier (UID). Multiple BoundingBox messages sharing
   * the same UID refers to the same bounding box 
   */
  uint32_t uid;
};
#define VMETA__BOUNDING_BOX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__bounding_box__descriptor) \
    , 0, 0, 0, 0, VMETA__TRACKING_CLASS__TC_PERSON, 0, 0 }


struct  Vmeta__DroneMetadata
{
  ProtobufCMessage base;
  /*
   * Drone quaternion 
   */
  Vmeta__Quaternion *quat;
  /*
   * Drone location 
   */
  Vmeta__Location *location;
  /*
   * Best ground distance estimation (m) 
   */
  double ground_distance;
  /*
   * Estimated position of the drone in NED frame (m).
   * The position is initialized at first take off. When this position may
   * have drifted from the true position (for example when GPS signal is
   * not available), this position jumps on the first absolute position
   * measurement available. 
   */
  Vmeta__NED *position;
  /*
   * Estimated position of the drone in the local frame (m).
   * The local frame is not NED: X and Y axis are arbitrary, but the Z
   * axis is guaranteed to point down.
   * The position is initialized at first take off. This position is
   * guaranteed not to jump, even when a new absolute position (usually
   * GPS) is avaiable. Instead, the origin of the local frame jumps in
   * order to ensure the continuity of the local position.
   */
  Vmeta__Vector3 *local_position;
  /*
   * Speed vector in NED (North-East-Down) (m/s) 
   */
  Vmeta__NED *speed;
  /*
   * Battery charge percentage 
   */
  int32_t battery_percentage;
  /*
   * Flying state 
   */
  Vmeta__FlyingState flying_state;
};
#define VMETA__DRONE_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__drone_metadata__descriptor) \
    , NULL, NULL, 0, NULL, NULL, NULL, 0, VMETA__FLYING_STATE__FS_LANDED }


struct  Vmeta__CameraMetadata
{
  ProtobufCMessage base;
  /*
   * Frame capture timestamp (us, monotonic) 
   */
  uint64_t timestamp;
  /*
   * Frame capture UTC timestamp (us since the Epoch) 
   */
  uint64_t utc_timestamp;
  /*
   * Frame capture UTC timestamp accuracy (us); zero means unknown,
   * utc_timestamp must then be considered invalid 
   */
  uint32_t utc_timestamp_accuracy;
  /*
   * Frame base view quaternion (without user pan/tilt) 
   */
  Vmeta__Quaternion *base_quat;
  /*
   * Frame view quaternion 
   */
  Vmeta__Quaternion *quat;
  /*
   * Frame exposure time (ms) 
   */
  float exposure_time;
  /*
   * Frame ISO gain 
   */
  uint32_t iso_gain;
  /*
   * Frame AWB red gain 
   */
  float awb_r_gain;
  /*
   * Frame AWB blue gain 
   */
  float awb_b_gain;
  /*
   * Frame horizontal field of view (degrees) 
   */
  float hfov;
  /*
   * Frame vertical field of view (degrees) 
   */
  float vfov;
};
#define VMETA__CAMERA_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__camera_metadata__descriptor) \
    , 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0 }


struct  Vmeta__TrackingProposalMetadata
{
  ProtobufCMessage base;
  /*
   * List of proposed bounding boxes 
   */
  size_t n_proposals;
  Vmeta__BoundingBox **proposals;
  /*
   * Processed frame capture timestamp (us, monotonic)
   * note: may be different from the timestamp in CameraMetadata 
   */
  uint64_t timestamp;
};
#define VMETA__TRACKING_PROPOSAL_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__tracking_proposal_metadata__descriptor) \
    , 0,NULL, 0 }


struct  Vmeta__TrackingMetadata
{
  ProtobufCMessage base;
  /*
   * Tracking target 
   */
  Vmeta__BoundingBox *target;
  /*
   * Processed frame capture timestamp (us, monotonic)
   * note: may be different from the timestamp in CameraMetadata 
   */
  uint64_t timestamp;
  /*
   * Tracking quality ([0; 255], 0 is worst, 255 is best) 
   */
  uint32_t quality;
  /*
   * Tracking state 
   */
  Vmeta__TrackingState state;
  /*
   * Cookie value passed by the app when the tracking is started 
   */
  uint32_t cookie;
};
#define VMETA__TRACKING_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__tracking_metadata__descriptor) \
    , NULL, 0, 0, VMETA__TRACKING_STATE__TS_TRACKING, 0 }


struct  Vmeta__WifiLinkMetadata
{
  ProtobufCMessage base;
  /*
   * Wifi link goodput (throughput estimation) (kbit/s) 
   */
  uint32_t goodput;
  /*
   * Wifi link quality ([0; 5], 0 is worst, 5 is best) 
   */
  uint32_t quality;
  /*
   * Wifi link RSSI (dBm) 
   */
  int32_t rssi;
};
#define VMETA__WIFI_LINK_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__wifi_link_metadata__descriptor) \
    , 0, 0, 0 }


struct  Vmeta__StarfishLinkInfo
{
  ProtobufCMessage base;
  /*
   * Type of link 
   */
  Vmeta__LinkType type;
  /*
   * Link status 
   */
  Vmeta__LinkStatus status;
  /*
   * Link quality indication: 1 (lower) to 5 (better),
   * 0 if not available 
   */
  int32_t quality;
  /*
   * Link active status 
   */
  protobuf_c_boolean active;
};
#define VMETA__STARFISH_LINK_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__starfish_link_info__descriptor) \
    , VMETA__LINK_TYPE__LINK_TYPE_UNKNOWN, VMETA__LINK_STATUS__LINK_STATUS_DOWN, 0, 0 }


struct  Vmeta__StarfishLinkMetadata
{
  ProtobufCMessage base;
  /*
   * Links 
   */
  size_t n_links;
  Vmeta__StarfishLinkInfo **links;
  /*
   * Global link quality indication: 1 (lower) to 5 (better),
   * 0 if not available 
   */
  int32_t quality;
};
#define VMETA__STARFISH_LINK_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__starfish_link_metadata__descriptor) \
    , 0,NULL, 0 }


typedef enum {
  VMETA__LINK_METADATA__PROTOCOL__NOT_SET = 0,
  VMETA__LINK_METADATA__PROTOCOL_WIFI = 1,
  VMETA__LINK_METADATA__PROTOCOL_STARFISH = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VMETA__LINK_METADATA__PROTOCOL__CASE)
} Vmeta__LinkMetadata__ProtocolCase;

struct  Vmeta__LinkMetadata
{
  ProtobufCMessage base;
  Vmeta__LinkMetadata__ProtocolCase protocol_case;
  union {
    /*
     * Wifi link metadata 
     */
    Vmeta__WifiLinkMetadata *wifi;
    /*
     * Starfish link metadata 
     */
    Vmeta__StarfishLinkMetadata *starfish;
  };
};
#define VMETA__LINK_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__link_metadata__descriptor) \
    , VMETA__LINK_METADATA__PROTOCOL__NOT_SET, {0} }


struct  Vmeta__TimedMetadata
{
  ProtobufCMessage base;
  /*
   * Drone-related metadata 
   */
  Vmeta__DroneMetadata *drone;
  /*
   * Camera-related metadata 
   */
  Vmeta__CameraMetadata *camera;
  /*
   * Link-related metadata, one per available link 
   */
  size_t n_links;
  Vmeta__LinkMetadata **links;
  /*
   * Tracking metadata 
   */
  Vmeta__TrackingMetadata *tracking;
  /*
   * Tracking proposal metadata 
   */
  Vmeta__TrackingProposalMetadata *proposal;
};
#define VMETA__TIMED_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vmeta__timed_metadata__descriptor) \
    , NULL, NULL, 0,NULL, NULL, NULL }


/* Vmeta__Quaternion methods */
void   vmeta__quaternion__init
                     (Vmeta__Quaternion         *message);
size_t vmeta__quaternion__get_packed_size
                     (const Vmeta__Quaternion   *message);
size_t vmeta__quaternion__pack
                     (const Vmeta__Quaternion   *message,
                      uint8_t             *out);
size_t vmeta__quaternion__pack_to_buffer
                     (const Vmeta__Quaternion   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__Quaternion *
       vmeta__quaternion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__quaternion__free_unpacked
                     (Vmeta__Quaternion *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__Location methods */
void   vmeta__location__init
                     (Vmeta__Location         *message);
size_t vmeta__location__get_packed_size
                     (const Vmeta__Location   *message);
size_t vmeta__location__pack
                     (const Vmeta__Location   *message,
                      uint8_t             *out);
size_t vmeta__location__pack_to_buffer
                     (const Vmeta__Location   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__Location *
       vmeta__location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__location__free_unpacked
                     (Vmeta__Location *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__Vector3 methods */
void   vmeta__vector3__init
                     (Vmeta__Vector3         *message);
size_t vmeta__vector3__get_packed_size
                     (const Vmeta__Vector3   *message);
size_t vmeta__vector3__pack
                     (const Vmeta__Vector3   *message,
                      uint8_t             *out);
size_t vmeta__vector3__pack_to_buffer
                     (const Vmeta__Vector3   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__Vector3 *
       vmeta__vector3__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__vector3__free_unpacked
                     (Vmeta__Vector3 *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__NED methods */
void   vmeta__ned__init
                     (Vmeta__NED         *message);
size_t vmeta__ned__get_packed_size
                     (const Vmeta__NED   *message);
size_t vmeta__ned__pack
                     (const Vmeta__NED   *message,
                      uint8_t             *out);
size_t vmeta__ned__pack_to_buffer
                     (const Vmeta__NED   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__NED *
       vmeta__ned__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__ned__free_unpacked
                     (Vmeta__NED *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__BoundingBox methods */
void   vmeta__bounding_box__init
                     (Vmeta__BoundingBox         *message);
size_t vmeta__bounding_box__get_packed_size
                     (const Vmeta__BoundingBox   *message);
size_t vmeta__bounding_box__pack
                     (const Vmeta__BoundingBox   *message,
                      uint8_t             *out);
size_t vmeta__bounding_box__pack_to_buffer
                     (const Vmeta__BoundingBox   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__BoundingBox *
       vmeta__bounding_box__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__bounding_box__free_unpacked
                     (Vmeta__BoundingBox *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__DroneMetadata methods */
void   vmeta__drone_metadata__init
                     (Vmeta__DroneMetadata         *message);
size_t vmeta__drone_metadata__get_packed_size
                     (const Vmeta__DroneMetadata   *message);
size_t vmeta__drone_metadata__pack
                     (const Vmeta__DroneMetadata   *message,
                      uint8_t             *out);
size_t vmeta__drone_metadata__pack_to_buffer
                     (const Vmeta__DroneMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__DroneMetadata *
       vmeta__drone_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__drone_metadata__free_unpacked
                     (Vmeta__DroneMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__CameraMetadata methods */
void   vmeta__camera_metadata__init
                     (Vmeta__CameraMetadata         *message);
size_t vmeta__camera_metadata__get_packed_size
                     (const Vmeta__CameraMetadata   *message);
size_t vmeta__camera_metadata__pack
                     (const Vmeta__CameraMetadata   *message,
                      uint8_t             *out);
size_t vmeta__camera_metadata__pack_to_buffer
                     (const Vmeta__CameraMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__CameraMetadata *
       vmeta__camera_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__camera_metadata__free_unpacked
                     (Vmeta__CameraMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__TrackingProposalMetadata methods */
void   vmeta__tracking_proposal_metadata__init
                     (Vmeta__TrackingProposalMetadata         *message);
size_t vmeta__tracking_proposal_metadata__get_packed_size
                     (const Vmeta__TrackingProposalMetadata   *message);
size_t vmeta__tracking_proposal_metadata__pack
                     (const Vmeta__TrackingProposalMetadata   *message,
                      uint8_t             *out);
size_t vmeta__tracking_proposal_metadata__pack_to_buffer
                     (const Vmeta__TrackingProposalMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__TrackingProposalMetadata *
       vmeta__tracking_proposal_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__tracking_proposal_metadata__free_unpacked
                     (Vmeta__TrackingProposalMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__TrackingMetadata methods */
void   vmeta__tracking_metadata__init
                     (Vmeta__TrackingMetadata         *message);
size_t vmeta__tracking_metadata__get_packed_size
                     (const Vmeta__TrackingMetadata   *message);
size_t vmeta__tracking_metadata__pack
                     (const Vmeta__TrackingMetadata   *message,
                      uint8_t             *out);
size_t vmeta__tracking_metadata__pack_to_buffer
                     (const Vmeta__TrackingMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__TrackingMetadata *
       vmeta__tracking_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__tracking_metadata__free_unpacked
                     (Vmeta__TrackingMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__WifiLinkMetadata methods */
void   vmeta__wifi_link_metadata__init
                     (Vmeta__WifiLinkMetadata         *message);
size_t vmeta__wifi_link_metadata__get_packed_size
                     (const Vmeta__WifiLinkMetadata   *message);
size_t vmeta__wifi_link_metadata__pack
                     (const Vmeta__WifiLinkMetadata   *message,
                      uint8_t             *out);
size_t vmeta__wifi_link_metadata__pack_to_buffer
                     (const Vmeta__WifiLinkMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__WifiLinkMetadata *
       vmeta__wifi_link_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__wifi_link_metadata__free_unpacked
                     (Vmeta__WifiLinkMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__StarfishLinkInfo methods */
void   vmeta__starfish_link_info__init
                     (Vmeta__StarfishLinkInfo         *message);
size_t vmeta__starfish_link_info__get_packed_size
                     (const Vmeta__StarfishLinkInfo   *message);
size_t vmeta__starfish_link_info__pack
                     (const Vmeta__StarfishLinkInfo   *message,
                      uint8_t             *out);
size_t vmeta__starfish_link_info__pack_to_buffer
                     (const Vmeta__StarfishLinkInfo   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__StarfishLinkInfo *
       vmeta__starfish_link_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__starfish_link_info__free_unpacked
                     (Vmeta__StarfishLinkInfo *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__StarfishLinkMetadata methods */
void   vmeta__starfish_link_metadata__init
                     (Vmeta__StarfishLinkMetadata         *message);
size_t vmeta__starfish_link_metadata__get_packed_size
                     (const Vmeta__StarfishLinkMetadata   *message);
size_t vmeta__starfish_link_metadata__pack
                     (const Vmeta__StarfishLinkMetadata   *message,
                      uint8_t             *out);
size_t vmeta__starfish_link_metadata__pack_to_buffer
                     (const Vmeta__StarfishLinkMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__StarfishLinkMetadata *
       vmeta__starfish_link_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__starfish_link_metadata__free_unpacked
                     (Vmeta__StarfishLinkMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__LinkMetadata methods */
void   vmeta__link_metadata__init
                     (Vmeta__LinkMetadata         *message);
size_t vmeta__link_metadata__get_packed_size
                     (const Vmeta__LinkMetadata   *message);
size_t vmeta__link_metadata__pack
                     (const Vmeta__LinkMetadata   *message,
                      uint8_t             *out);
size_t vmeta__link_metadata__pack_to_buffer
                     (const Vmeta__LinkMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__LinkMetadata *
       vmeta__link_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__link_metadata__free_unpacked
                     (Vmeta__LinkMetadata *message,
                      ProtobufCAllocator *allocator);
/* Vmeta__TimedMetadata methods */
void   vmeta__timed_metadata__init
                     (Vmeta__TimedMetadata         *message);
size_t vmeta__timed_metadata__get_packed_size
                     (const Vmeta__TimedMetadata   *message);
size_t vmeta__timed_metadata__pack
                     (const Vmeta__TimedMetadata   *message,
                      uint8_t             *out);
size_t vmeta__timed_metadata__pack_to_buffer
                     (const Vmeta__TimedMetadata   *message,
                      ProtobufCBuffer     *buffer);
Vmeta__TimedMetadata *
       vmeta__timed_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vmeta__timed_metadata__free_unpacked
                     (Vmeta__TimedMetadata *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Vmeta__Quaternion_Closure)
                 (const Vmeta__Quaternion *message,
                  void *closure_data);
typedef void (*Vmeta__Location_Closure)
                 (const Vmeta__Location *message,
                  void *closure_data);
typedef void (*Vmeta__Vector3_Closure)
                 (const Vmeta__Vector3 *message,
                  void *closure_data);
typedef void (*Vmeta__NED_Closure)
                 (const Vmeta__NED *message,
                  void *closure_data);
typedef void (*Vmeta__BoundingBox_Closure)
                 (const Vmeta__BoundingBox *message,
                  void *closure_data);
typedef void (*Vmeta__DroneMetadata_Closure)
                 (const Vmeta__DroneMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__CameraMetadata_Closure)
                 (const Vmeta__CameraMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__TrackingProposalMetadata_Closure)
                 (const Vmeta__TrackingProposalMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__TrackingMetadata_Closure)
                 (const Vmeta__TrackingMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__WifiLinkMetadata_Closure)
                 (const Vmeta__WifiLinkMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__StarfishLinkInfo_Closure)
                 (const Vmeta__StarfishLinkInfo *message,
                  void *closure_data);
typedef void (*Vmeta__StarfishLinkMetadata_Closure)
                 (const Vmeta__StarfishLinkMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__LinkMetadata_Closure)
                 (const Vmeta__LinkMetadata *message,
                  void *closure_data);
typedef void (*Vmeta__TimedMetadata_Closure)
                 (const Vmeta__TimedMetadata *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    vmeta__tracking_class__descriptor;
extern const ProtobufCEnumDescriptor    vmeta__tracking_state__descriptor;
extern const ProtobufCEnumDescriptor    vmeta__flying_state__descriptor;
extern const ProtobufCEnumDescriptor    vmeta__link_type__descriptor;
extern const ProtobufCEnumDescriptor    vmeta__link_status__descriptor;
extern const ProtobufCMessageDescriptor vmeta__quaternion__descriptor;
extern const ProtobufCMessageDescriptor vmeta__location__descriptor;
extern const ProtobufCMessageDescriptor vmeta__vector3__descriptor;
extern const ProtobufCMessageDescriptor vmeta__ned__descriptor;
extern const ProtobufCMessageDescriptor vmeta__bounding_box__descriptor;
extern const ProtobufCMessageDescriptor vmeta__drone_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__camera_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__tracking_proposal_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__tracking_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__wifi_link_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__starfish_link_info__descriptor;
extern const ProtobufCMessageDescriptor vmeta__starfish_link_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__link_metadata__descriptor;
extern const ProtobufCMessageDescriptor vmeta__timed_metadata__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_vmeta_2eproto__INCLUDED */
